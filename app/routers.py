# app/routers.py
import os
import tempfile
import logging
from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message
from openai import AsyncOpenAI
from httpx import AsyncClient
from pydub import AudioSegment

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞
router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI Whisper
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
http_client = AsyncClient()
openai_client = AsyncOpenAI(api_key=OPENAI_API_KEY, http_client=http_client)

# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, "
        "–∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å. –ù–∞—á–Ω—ë–º?"
    )

# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
@router.message(F.text)
async def handle_text(message: Message):
    await message.answer(f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ç–µ–∫—Å—Ç: {message.text}")

# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
@router.message(F.voice)
async def handle_voice(message: Message, bot):
    try:
        file_info = await bot.get_file(message.voice.file_id)
        file_path = file_info.file_path

        with tempfile.NamedTemporaryFile(delete=False, suffix=".oga") as tmp_oga:
            await bot.download_file(file_path, destination=tmp_oga)
            oga_path = tmp_oga.name

        mp3_path = oga_path.replace(".oga", ".mp3")
        AudioSegment.from_file(oga_path).export(mp3_path, format="mp3")

        with open(mp3_path, "rb") as audio_file:
            transcript = await openai_client.audio.transcriptions.create(
                model="whisper-1", file=audio_file
            )

        await message.answer(f"üó£ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞: {transcript.text}")
        os.remove(oga_path)
        os.remove(mp3_path)

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")

# ‚úÖ –õ–æ–≥–≥–µ—Ä –Ω–∞ –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî —á—Ç–æ–±—ã –ª–æ–≤–∏—Ç—å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
@router.message()
async def catch_all(message: Message):
    logging.warning(f"‚ö†Ô∏è UNHANDLED MESSAGE:\n{message.model_dump_json(indent=2)}")
    await message.answer("ü§ñ –Ø –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é, —á—Ç–æ —Å –Ω–∏–º –¥–µ–ª–∞—Ç—å.")
